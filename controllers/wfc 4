from controller import Robot
#v1 - v2
def run_robot(robot):
    """ Wall-following robot with color detection based on the whole image """
    
    # Get the time step of the current world
    timestep = int(robot.getBasicTimeStep())
    max_speed = 6.28
    
    # Enable motors
    left_motor = robot.getDevice('left wheel motor')
    right_motor = robot.getDevice('right wheel motor')
    
    left_motor.setPosition(float('inf'))
    left_motor.setVelocity(0.0)
    
    right_motor.setPosition(float('inf'))
    right_motor.setVelocity(0.0)
    
    # Enable proximity sensors
    prox_sensors = []
    for ind in range(8):
        sensor_name = 'ps' + str(ind)
        prox_sensors.append(robot.getDevice(sensor_name))
        prox_sensors[ind].enable(timestep)
    
    # Enable the camera
    camera = robot.getDevice("camera")
    camera.enable(timestep)
    
    def detect_color():
        """Detect the dominant color in the entire image using the camera."""
        image = camera.getImage()
        if image is None:
            print("Camera image is not available")
            return "Unknown"
        
        width = camera.getWidth()
        height = camera.getHeight()
        print(f"Camera dimensions: Width = {width}, Height = {height}")  # Debugging info
        
        # Initialize accumulators for RGB values
        total_red = 0
        total_green = 0
        total_blue = 0
        total_pixels = width * height  # Total number of pixels in the image

        # Iterate over all pixels
        for y in range(height):
            for x in range(width):
                # Accumulate RGB values
                total_red += camera.imageGetRed(image, width, y, x)
                total_green += camera.imageGetGreen(image, width, y, x)
                total_blue += camera.imageGetBlue(image, width, y, x)

        # Calculate the average RGB values
        avg_red = total_red / total_pixels
        avg_green = total_green / total_pixels
        avg_blue = total_blue / total_pixels

        # Determine the color based on average RGB thresholds
        if avg_red > 200 and avg_green < 100 and avg_blue < 100:
            return "Red"
        elif avg_red > 200 and avg_green > 200 and avg_blue < 100:
            return "Yellow"
        elif avg_red > 200 and avg_green < 150 and avg_blue > 150:
            return "Pink"
        elif avg_red > 100 and avg_green < 100 and avg_blue < 50:
            return "Brown"
        elif avg_red < 100 and avg_green > 200 and avg_blue < 100:
            return "Green"
        else:
            return "Unknown"

    # Main loop
    while robot.step(timestep) != -1:
        # Read the sensors
        left_distance = prox_sensors[5].getValue()
        right_distance = prox_sensors[2].getValue()
        left_wall = left_distance > 80
        right_wall = right_distance > 80
        left_corner = prox_sensors[6].getValue() > 80
        front_wall = prox_sensors[7].getValue() > 80
        
        # Default motor speeds
        left_speed = max_speed
        right_speed = max_speed

        # Logic for wall following and centering between walls
        if front_wall:
            print("Turn right in place")
            left_speed = max_speed
            right_speed = -max_speed
        else:
            if left_wall and right_wall:
                print("Centering between two walls")
                balance_factor = (left_distance - right_distance) / 10  # Normalize difference
                left_speed = max_speed - balance_factor
                right_speed = max_speed + balance_factor
            elif left_wall:
                print("Drive forward along left wall")
                left_speed = max_speed
                right_speed = max_speed
            elif right_wall:
                print("Drive forward along right wall")
                left_speed = max_speed
                right_speed = max_speed / 2
            else:
                print("Searching for wall")
                left_speed = max_speed / 8
                right_speed = max_speed
            if left_corner:
                print("Came too close, turn right")
                left_speed = max_speed
                right_speed = max_speed / 8

        # Continuous color monitoring
        detected_color = detect_color()
        if detected_color != "Unknown":
            print(f"Detected Color: {detected_color}")

        # Set motor velocities
        left_motor.setVelocity(left_speed)
        right_motor.setVelocity(right_speed)

if __name__ == "__main__":
    # Create the Robot instance
    my_robot = Robot()
    run_robot(my_robot)
